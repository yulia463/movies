1 Распространение событий (Event Propagation) в JavaScript
Событие в DOM проходит через три фазы:
Capture (погружение) - событие идёт сверху вниз от window к целевому элементу.
Target (цель) - событие достигло конкретного элемента, на котором произошло.
Bubble (всплытие) - событие идёт снизу вверх от целевого элемента к window.
Практическое применение:
Можно повесить один обработчик на родителя вместо множества на дочерних элементах.
Контроль фазы помогает перехватывать события раньше или останавливать их (event.stopPropagation()).

2 Promise — объект, представляющий результат асинхронной операции, которая может завершиться:
pending (ожидание),
fulfilled (успех),
rejected (ошибка).
Основной метод обработки: .then() / .catch() / .finally().
Другой способ работы с асинхронным кодом — async/await.
Event Loop: обеспечивает неблокирующую обработку событий — добавляет коллбэки в очередь, чтобы JS мог продолжать работу,
 не останавливая интерфейс.

 3 ООП (Объектно-ориентированное программирование) — способ структурирования кода через объекты и их взаимодействие.
   Принципы:
Инкапсуляция — скрытие внутренней реализации, пример: приватные поля #field.
Наследование — объект получает свойства другого через class Child extends Parent.
Полиморфизм — объекты одного типа могут по-разному реализовывать методы.
Абстракция — выделение только нужного функционала, пример: интерфейс класса без раскрытия деталей.
В JS ООП реализовано через классы (ES6) и прототипное наследование.

4. Как браузер обрабатывает URL
Пользователь вводит URL → браузер парсит его.
Определяет протокол (http/https), домен и путь.
Выполняет DNS-запрос для получения IP сервера.
Отправляет HTTP(S) запрос на сервер.
Сервер возвращает HTML → браузер строит DOM.
CSS и JS загружаются и применяются → строится CSSOM и DOM + CSSOM → Render Tree.
Браузер выполняет рендеринг страницы.
Ускорение: кэширование, CDN, HTTP/2, lazy loading, prefetching.
Проблемы: XSS, CSRF, CORS (междоменные ограничения), утечки данных.
